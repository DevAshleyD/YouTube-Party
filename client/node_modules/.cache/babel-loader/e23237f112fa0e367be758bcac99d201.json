{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\react\\\\YouTubeClone\\\\client\\\\src\\\\comp\\\\VideoDetail.js\";\nimport React from 'react';\nimport YouTube from 'react-youtube'; // You need to pass a funciton to VideoDetail \n// Which will then be called from inside, \n//props.video.id.videoId ---> This  is the link to the video\n\nclass VideoDetail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: 0,\n      player: []\n    };\n\n    this.videochange = event => {\n      this.props.play(event.target.playerInfo.currentTime, event.target.playerInfo.playerState, this.state.id); //PlayerState = 2 then it is playing\n      //PlayerState = 1 then it is pasued\n      //Match the player state, if it is 2 we pause at the current time, if it is 1 we play at the currnet time that is passed\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      // This means the requres to change the play status is coming from a differnt person\n      if (nextProps.id != this.state.id) {\n        if (this.state.player[0] != null) {\n          if (nextProps.playerState == 1) {\n            console.log(\"Here you should play\");\n            this.state.player[0].seekTo(nextProps.time, 1);\n          }\n\n          if (nextProps.playerState == 2) {\n            console.log(\"The video has been pasued\");\n            this.state.player[0].seekTo(nextProps.time, 2);\n          }\n        } // -1 = unstarted\n        // 0 = ended \n        // 1 = playing \n        // 2 = paused\n        // 3 = buffering\n        // 5= video cued\n\n      }\n    };\n\n    this.Ready = event => {\n      const player = this.state.player;\n      player.push(event.target);\n      this.setState({\n        player: player\n      });\n    };\n  }\n\n  componentDidMount() {\n    // This is only ever called once\n    this.setState({\n      id: this.props.id\n    });\n  }\n\n  render() {\n    const opts = {\n      height: '390',\n      width: '640',\n      playerVars: {\n        // https://developers.google.com/youtube/player_parameters\n        enablejsapi: 1\n      }\n    };\n\n    if (this.props.video == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 16\n        }\n      });\n    } // You need to call, a call back functtion, which then will will emit to all other sockets, then on reciveing from \n    //Socket you can then click the button to play\n    //You need to send back event.target\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui embed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(YouTube, {\n      onStateChange: this.videochange,\n      onReady: this.Ready,\n      videoId: this.props.video.id.videoId,\n      opts: opts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }), \";\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"ui header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, this.props.video.snippet.title), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, this.props.video.snippet.description)));\n  }\n\n}\n\nexport default VideoDetail;","map":{"version":3,"sources":["C:/Users/david/react/YouTubeClone/client/src/comp/VideoDetail.js"],"names":["React","YouTube","VideoDetail","Component","state","id","player","videochange","event","props","play","target","playerInfo","currentTime","playerState","componentWillReceiveProps","nextProps","console","log","seekTo","time","Ready","push","setState","componentDidMount","render","opts","height","width","playerVars","enablejsapi","video","videoId","snippet","title","description"],"mappings":"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","sourcesContent":["import React from 'react'; \r\nimport YouTube from 'react-youtube';\r\n// You need to pass a funciton to VideoDetail \r\n// Which will then be called from inside, \r\n//props.video.id.videoId ---> This  is the link to the video\r\nclass VideoDetail extends React.Component{\r\n\r\n    state = {id:0, player:[]}; \r\n   \r\n\r\n    videochange = (event) => {\r\n\r\n       \r\n        this.props.play(event.target.playerInfo.currentTime, event.target.playerInfo.playerState, this.state.id);\r\n\r\n        //PlayerState = 2 then it is playing\r\n        //PlayerState = 1 then it is pasued\r\n\r\n        //Match the player state, if it is 2 we pause at the current time, if it is 1 we play at the currnet time that is passed\r\n        \r\n       \r\n    }\r\n\r\n    //nextProps that are being passed \r\n    componentWillReceiveProps =(nextProps)=>{\r\n\r\n        // This means the requres to change the play status is coming from a differnt person\r\n        \r\n        if(nextProps.id!= this.state.id){\r\n            if(this.state.player[0]!=null){\r\n                \r\n\r\n                if(nextProps.playerState == 1){\r\n                    console.log(\"Here you should play\");\r\n                    this.state.player[0].seekTo(nextProps.time, 1); \r\n\r\n                }\r\n\r\n                if(nextProps.playerState == 2){\r\n                    console.log(\"The video has been pasued\");\r\n                    this.state.player[0].seekTo(nextProps.time,2); \r\n\r\n                }\r\n\r\n\r\n            \r\n            }\r\n\r\n            // -1 = unstarted\r\n            // 0 = ended \r\n            // 1 = playing \r\n            // 2 = paused\r\n            // 3 = buffering\r\n            // 5= video cued\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n   \r\n   \r\n    \r\n      componentDidMount(){\r\n\r\n        // This is only ever called once\r\n        \r\n        this.setState({id:this.props.id}); \r\n        \r\n      }\r\n\r\n      Ready =(event) => {\r\n        const player = this.state.player;\r\n        player.push(event.target);\r\n        this.setState({\r\n          player: player\r\n        });\r\n      }\r\n\r\n\r\n\r\n  \r\n    render() {\r\n\r\n        const opts = {\r\n          height: '390',\r\n          width: '640',\r\n          playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n        \r\n            enablejsapi:1\r\n          },\r\n        };\r\n\r\n        if(this.props.video==null){\r\n        return <div></div>; \r\n        }\r\n        \r\n\r\n        // You need to call, a call back functtion, which then will will emit to all other sockets, then on reciveing from \r\n        //Socket you can then click the button to play\r\n        //You need to send back event.target\r\n        return(\r\n\r\n            <div>\r\n\r\n                \r\n                <div  className=\"ui embed\">\r\n                <YouTube  onStateChange={this.videochange}   onReady={this.Ready}     videoId={this.props.video.id.videoId} opts={opts}  />;\r\n        \r\n                </div>\r\n        \r\n                <div className = \"ui segment\">\r\n                <h4 className=\"ui header\">{this.props.video.snippet.title}</h4>\r\n                <p>{this.props.video.snippet.description}</p>\r\n                </div>\r\n        \r\n            </div>\r\n        \r\n        );\r\n      }\r\n    \r\n}\r\n\r\n\r\nexport default VideoDetail;"]},"metadata":{},"sourceType":"module"}