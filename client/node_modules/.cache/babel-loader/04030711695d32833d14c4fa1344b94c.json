{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\react\\\\YouTubeClone\\\\client\\\\src\\\\comp\\\\App.js\";\nimport React from 'react';\nimport SearchBar from './SearchBar';\nimport youtube from '../api/youtube';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\nimport CommentDetail from './CommentDetail';\nimport socketIOClient from \"socket.io-client\";\nimport Message from './Message';\nimport MessageList from './MessageList';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      videos: [],\n      selectedVideo: null,\n      data: null,\n      endpoint: \"localhost:4001\",\n      color: 'white',\n      messages: [],\n      time: 0,\n      playerState: -1,\n      target: []\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.send = list => {\n      //You are sendign the array of messages\n      socket.emit('change color', list);\n    };\n\n    this.EmitSearch = result => {\n      socket.emit('search', result);\n    };\n\n    this.componentWillMount = () => {\n      socket.on('change color', col => {\n        // Here Im updating the messages array, to be the new messages that I have recived\n        this.setState({\n          messages: col\n        });\n      }); // Setting the state with the search result\n\n      socket.on('search', result => {\n        this.setState({\n          videos: result.data.items,\n          selectedVideo: result.data.items[0]\n        });\n      });\n      socket.on('select', video => {\n        this.setState({\n          selectedVideo: video\n        });\n      });\n      socket.on('play', (time, state) => {\n        // Here  I need to use to time and state to then change the video players' vid status\n        this.setState({\n          time: time,\n          playerState: state\n        });\n      });\n    };\n\n    this.sendMessage = message => {\n      // You take this message that is given, and update the state of the messages\n      const list = this.state.messages;\n      list.push(message);\n      this.send(list);\n    };\n\n    this.pressPlay = (time, state) => {\n      socket.emit('play', time, state);\n    };\n\n    this.search = async term => {\n      //The SearchBar calls the search funciton with the term\n      // And here we will make the api request\n      const result = await youtube.get(\"/search\", {\n        params: {\n          q: term,\n          part: \"snippet\",\n          type: 'video',\n          maxResults: 5,\n          key: 'AIzaSyBSAzBSy4bhfG8JaCmptEDdreLpQXdAAbQ'\n        }\n      });\n      this.EmitSearch(result);\n    };\n\n    this.onVideoSelect = video => {\n      socket.emit('select', video);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui container\",\n      style: {\n        marginTop: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, {\n      Search: this.search,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"eleven wide column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(VideoDetail, {\n      target: this.state.target,\n      time: this.state.time,\n      playerState: this.state.playerState,\n      play: this.pressPlay,\n      video: this.state.selectedVideo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"five wide column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(VideoList, {\n      videos: this.state.videos,\n      onVideoSelect: this.onVideoSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"ui header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }, \" Chat Room\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sixteen wide column ui segment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, this.state.data, /*#__PURE__*/React.createElement(MessageList, {\n      msglist: this.state.messages,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(Message, {\n      msg: this.sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/david/react/YouTubeClone/client/src/comp/App.js"],"names":["React","SearchBar","youtube","VideoList","VideoDetail","CommentDetail","socketIOClient","Message","MessageList","App","Component","state","videos","selectedVideo","data","endpoint","color","messages","time","playerState","target","socket","send","list","emit","EmitSearch","result","componentWillMount","on","col","setState","items","video","sendMessage","message","push","pressPlay","search","term","get","params","q","part","type","maxResults","key","onVideoSelect","render","marginTop"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAGA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BC,KAD8B,GACtB;AAACC,MAAAA,MAAM,EAAE,EAAT;AAAaC,MAAAA,aAAa,EAAE,IAA5B;AAAkCC,MAAAA,IAAI,EAAC,IAAvC;AAA8CC,MAAAA,QAAQ,EAAE,gBAAxD;AAA0EC,MAAAA,KAAK,EAAE,OAAjF;AAA0FC,MAAAA,QAAQ,EAAC,EAAnG;AAAuGC,MAAAA,IAAI,EAAC,CAA5G;AAA+GC,MAAAA,WAAW,EAAC,CAAC,CAA5H;AAA+HC,MAAAA,MAAM,EAAC;AAAtI,KADsB;AAAA,SAE7BC,MAF6B,GAEpBf,cAAc,CAAC,KAAKK,KAAL,CAAWI,QAAZ,CAFM;;AAAA,SAQ9BO,IAR8B,GAQtBC,IAAD,IAAU;AAEb;AACAF,MAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4BD,IAA5B;AACD,KAZ2B;;AAAA,SAe9BE,UAf8B,GAehBC,MAAD,IAAW;AAGpBL,MAAAA,MAAM,CAACG,IAAP,CAAY,QAAZ,EAAsBE,MAAtB;AAGH,KArB6B;;AAAA,SAyB5BC,kBAzB4B,GAyBP,MAAM;AAIvBN,MAAAA,MAAM,CAACO,EAAP,CAAU,cAAV,EAA2BC,GAAD,IAAS;AAC/B;AACA,aAAKC,QAAL,CAAc;AAACb,UAAAA,QAAQ,EAACY;AAAV,SAAd;AACH,OAHD,EAJuB,CASvB;;AACAR,MAAAA,MAAM,CAACO,EAAP,CAAU,QAAV,EAAqBF,MAAD,IAAY;AAE9B,aAAKI,QAAL,CAAc;AACVlB,UAAAA,MAAM,EAAEc,MAAM,CAACZ,IAAP,CAAYiB,KADV;AAEVlB,UAAAA,aAAa,EAACa,MAAM,CAACZ,IAAP,CAAYiB,KAAZ,CAAkB,CAAlB;AAFJ,SAAd;AAIH,OANC;AAQFV,MAAAA,MAAM,CAACO,EAAP,CAAU,QAAV,EAAqBI,KAAD,IAAW;AAE3B,aAAKF,QAAL,CAAc;AAACjB,UAAAA,aAAa,EAACmB;AAAf,SAAd;AAEH,OAJD;AAMAX,MAAAA,MAAM,CAACO,EAAP,CAAU,MAAV,EAAkB,CAACV,IAAD,EAAOP,KAAP,KAAiB;AAC/B;AAGA,aAAKmB,QAAL,CAAc;AAACZ,UAAAA,IAAI,EAACA,IAAN;AAAYC,UAAAA,WAAW,EAACR;AAAxB,SAAd;AACH,OALD;AAQD,KAzD2B;;AAAA,SA8D9BsB,WA9D8B,GA8DfC,OAAD,IAAY;AAEtB;AACA,YAAMX,IAAI,GAAG,KAAKZ,KAAL,CAAWM,QAAxB;AACAM,MAAAA,IAAI,CAACY,IAAL,CAAUD,OAAV;AACA,WAAKZ,IAAL,CAAUC,IAAV;AAEH,KArE6B;;AAAA,SAwE9Ba,SAxE8B,GAwElB,CAAClB,IAAD,EAAOP,KAAP,KAAiB;AAGzBU,MAAAA,MAAM,CAACG,IAAP,CAAY,MAAZ,EAAoBN,IAApB,EAA0BP,KAA1B;AAGH,KA9E6B;;AAAA,SAiF9B0B,MAjF8B,GAiFrB,MAAOC,IAAP,IAAc;AACnB;AACA;AAEA,YAAMZ,MAAM,GAAG,MAAMxB,OAAO,CAACqC,GAAR,CAAY,SAAZ,EAAuB;AACxCC,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAEH,IADG;AAENI,UAAAA,IAAI,EAAE,SAFA;AAGLC,UAAAA,IAAI,EAAE,OAHD;AAINC,UAAAA,UAAU,EAAE,CAJN;AAKNC,UAAAA,GAAG,EAAE;AALC;AADgC,OAAvB,CAArB;AASE,WAAKpB,UAAL,CAAgBC,MAAhB;AAEL,KAhG6B;;AAAA,SAoGlCoB,aApGkC,GAoGjBd,KAAD,IAAU;AAItBX,MAAAA,MAAM,CAACG,IAAP,CAAY,QAAZ,EAAsBQ,KAAtB;AACH,KAzGiC;AAAA;;AA2GlCe,EAAAA,MAAM,GAAE;AAMJ,wBAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,KAAK,EAAG;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKX,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAKI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAM,MAAA,SAAS,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAE,KAAK1B,KAAL,CAAWS,MAAhC;AAAuC,MAAA,IAAI,EAAG,KAAKT,KAAL,CAAWO,IAAzD;AAA+D,MAAA,WAAW,EAAE,KAAKP,KAAL,CAAWQ,WAAvF;AAAoG,MAAA,IAAI,EAAE,KAAKiB,SAA/G;AAA0H,MAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWE,aAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAFJ,eAQI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWC,MAA9B;AAAsC,MAAA,aAAa,EAAI,KAAKkC,aAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CARJ,CADJ,eAcM;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEE;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnC,KAAL,CAAWG,IADhB,eAGA,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWM,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,CAFF,CAdN,CALJ,eA8BA,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAE,KAAKgB,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BA,CAFJ;AAqCH;;AAtJiC;;AA8JlC,eAAexB,GAAf","sourcesContent":["import React from 'react'; \r\nimport SearchBar from './SearchBar'; \r\nimport youtube from '../api/youtube';\r\nimport VideoList from './VideoList';\r\nimport VideoDetail from './VideoDetail';\r\nimport CommentDetail from './CommentDetail';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Message from './Message'; \r\nimport MessageList from './MessageList';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {videos: [], selectedVideo: null, data:null,  endpoint: \"localhost:4001\", color: 'white', messages:[], time:0, playerState:-1, target:[]};\r\n     socket = socketIOClient(this.state.endpoint);\r\n\r\n    \r\n\r\n\r\n\r\n    send = (list) => {\r\n      \r\n        //You are sendign the array of messages\r\n        socket.emit('change color', list) \r\n      }\r\n\r\n    // When a user makes a search query, it is emmited to the other sockets, then once it is recived again, it will be rendered\r\n    EmitSearch = (result) =>{\r\n       \r\n        \r\n        socket.emit('search', result) \r\n\r\n\r\n    }\r\n    \r\n      \r\n    \r\n      componentWillMount = () => {\r\n      \r\n          \r\n        \r\n          socket.on('change color', (col) => {\r\n              // Here Im updating the messages array, to be the new messages that I have recived\r\n              this.setState({messages:col});\r\n          })\r\n\r\n          // Setting the state with the search result\r\n          socket.on('search', (result) => {\r\n            \r\n            this.setState({\r\n                videos: result.data.items,\r\n                selectedVideo:result.data.items[0]\r\n              });   \r\n        })\r\n\r\n        socket.on('select', (video) => {\r\n            \r\n            this.setState({selectedVideo:video});\r\n\r\n        })\r\n\r\n        socket.on('play', (time, state) => {\r\n            // Here  I need to use to time and state to then change the video players' vid status\r\n            \r\n           \r\n            this.setState({time:time, playerState:state })\r\n        })\r\n\r\n\r\n      }\r\n\r\n   \r\n    \r\n     \r\n    sendMessage = (message) =>{\r\n        \r\n        // You take this message that is given, and update the state of the messages\r\n        const list = this.state.messages;\r\n        list.push(message); \r\n        this.send(list)\r\n\r\n    }\r\n\r\n\r\n    pressPlay = (time, state) => {\r\n\r\n        \r\n        socket.emit('play', time, state)\r\n\r\n\r\n    }\r\n\r\n \r\n    search = async (term)=>{\r\n        //The SearchBar calls the search funciton with the term\r\n        // And here we will make the api request\r\n\r\n        const result = await youtube.get(\"/search\", {\r\n            params: {\r\n              q: term,\r\n              part: \"snippet\",\r\n               type: 'video',\r\n              maxResults: 5,\r\n              key: 'AIzaSyBSAzBSy4bhfG8JaCmptEDdreLpQXdAAbQ'            }\r\n          });\r\n\r\n          this.EmitSearch(result);\r\n          \r\n    }\r\n\r\n\r\n// This is a function\r\nonVideoSelect = (video) =>{\r\n\r\n\r\n    \r\n    socket.emit('select', video) \r\n}\r\n\r\nrender(){\r\n\r\n    \r\n    \r\n\r\n\r\n    return(\r\n\r\n        <div className=\"ui container\" style ={{marginTop:'10px' }}>\r\n\r\n            <SearchBar Search={this.search} />\r\n            \r\n            \r\n            <div className=\"ui grid\">\r\n                <div className=\"ui row\">\r\n\r\n                    <div  className=\"eleven wide column\">\r\n                        \r\n                        <VideoDetail target={this.state.target}time ={this.state.time} playerState={this.state.playerState} play={this.pressPlay} video={this.state.selectedVideo}/>\r\n                        \r\n                    </div>\r\n\r\n                    <div className=\"five wide column\">\r\n\r\n                        <VideoList videos={this.state.videos} onVideoSelect = {this.onVideoSelect}/>\r\n                    </div>\r\n                </div>\r\n                  <div className=\"ui row\">\r\n                  <h4 className=\"ui header\"> Chat Room</h4>\r\n                    <div className=\"sixteen wide column ui segment\">\r\n                        {this.state.data}\r\n                    \r\n                    <MessageList msglist={this.state.messages}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           \r\n       \r\n        <Message msg={this.sendMessage} />\r\n         </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App; "]},"metadata":{},"sourceType":"module"}