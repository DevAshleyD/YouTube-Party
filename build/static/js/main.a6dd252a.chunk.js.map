{"version":3,"sources":["comp/SearchBar.js","api/youtube.js","comp/VideoItem.js","comp/VideoList.js","comp/VideoDetail.js","comp/ContinuousSlider.js","comp/CommentDetail.js","comp/Message.js","comp/MessageList.js","comp/Login.js","comp/MemberList.js","comp/App.js","index.js"],"names":["SearchBar","state","term","change","event","setState","target","value","submit","preventDefault","props","Search","className","onSubmit","this","onChange","type","React","Component","axios","create","baseURL","VideoItem","vid","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","title","VideoList","videos","vidlist","map","video","VideoDetail","id","player","duration","internalChange","started","newMemberPause","internalStart","videochange","playerInfo","playerState","play","currentTime","messageSent","onPlay","onPause","console","log","pause","componentWillReceiveProps","nextProps","videoId","nPause","StateReset","pauseVideo","reset","getCurrentTime","Reset","joined","joinedReset","seekTo","time","PlayerState","playVideo","Ready","push","getDuration","loaded","onStateChange","onReady","opts","height","width","playerVars","enablejsapi","description","CommentDetail","Faker","image","avatar","name","class","content","Message","timeNow","d","Date","getHours","getMinutes","obj","msg","MessageList","images","msglist","Content","Name","Time","Login","enter","submitName","nameSubmission","createRoom","determineRender","roomStatus","placeholder","style","marginTop","MemberList","socket","io","App","selectedVideo","data","socketId","Math","floor","random","members","messages","newTime","room","error","called","emit","send","list","EmitSearch","result","componentWillMount","on","col","items","times","SelectedVideo","newMemberVideo","ID","sendMessage","message","pressPlay","pressPause","search","a","youtube","get","params","q","part","maxResults","key","close","ErrorDecider","EnterName","State","updatedTime","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.a6dd252a.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\n\r\nclass SearchBar extends React.Component{\r\n\r\nstate = {term: ''}; \r\n\r\n change = (event) =>{\r\nthis.setState({term:event.target.value});\r\n};\r\n\r\nsubmit = (event) =>{\r\nevent.preventDefault(); \r\nthis.props.Search(this.state.term);\r\n//this.props.Search.search(this.state.term);\r\n\r\n//To Do this term will be used to call the YouTube api\r\n\r\n};\r\n\r\nrender(){\r\n\r\nreturn(\r\n    <div className=\"search-bar ui segment\">\r\n        <form onSubmit={this.submit}className =\"ui form\">\r\n            <div className=\"field\" >\r\n\r\n                <label>Video Search</label>\r\n                <input \r\n                onChange={this.change }\r\n                value={this.state.term}\r\n                type=\"text\"/>\r\n            </div>\r\n        </form>\r\n       \r\n    </div>\r\n);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default SearchBar;","import axios from \"axios\";\r\n\r\n \r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n});","import React from 'react';\r\nimport './vi.css';\r\nconst VideoItem = ({vid, onVideoSelect}) =>{\r\n  \r\n    return (\r\n    \r\n    <div onClick={() => onVideoSelect(vid)}className=\"video-item item\">\r\n        <img className=\"ui image\"src={vid.snippet.thumbnails.medium.url}/>\r\n        <div className=\"content\">\r\n        <div className=\"header\">  {vid.snippet.title}</div>\r\n        <div className=\"description\">Updated 10 mins ago</div>\r\n        </div>\r\n\r\n\r\n    </div>);\r\n\r\n};\r\n\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './VideoItem'\r\nconst VideoList  = ({videos,  onVideoSelect}) =>{\r\n\r\n    const vidlist = videos.map((video)=>{\r\n\r\n        return <VideoItem vid = {video} onVideoSelect = {onVideoSelect}/>\r\n\r\n    });\r\n\r\n    return(\r\n\r\n        <div className=\"ui relaxed divided list\">\r\n\r\n            {vidlist}\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default VideoList; ","import React from 'react'; \r\nimport YouTube from 'react-youtube';\r\nimport Slider from './ContinuousSlider';\r\nimport SearchBar from './SearchBar';\r\n\r\n// You need to pass a funciton to VideoDetail \r\n// Which will then be called from inside, \r\n//props.video.id.videoId ---> This  is the link to the video\r\n\r\n\r\nclass VideoDetail extends React.Component{\r\n\r\n    state = {id:0, player:[], duration:0}; \r\n\r\n    //internalChange = false; \r\n    \r\n    internalChange = false\r\n    started  = false; \r\n    newMemberPause = false;\r\n    internalStart = 1; \r\n    \r\n    videochange =(event)=> {\r\n\r\n      // Here you need to emit a event that \r\n          \r\n      if(event.target.playerInfo.playerState == 3 && this.started == false){\r\n        this.props.play(event.target.playerInfo.currentTime, this.state.id);\r\n       this.started = true; \r\n       this.messageSent = true;\r\n       this.internalStart = 0; \r\n\r\n        }\r\n  \r\n      }\r\n      \r\n\r\n    onPlay =(event)=>{\r\n\r\n        \r\n\r\n          \r\n          \r\n          if(this.internalChange === false  && this.started == true && this.internalStart ==1) {\r\n         \r\n            this.props.play(event.target.playerInfo.currentTime, this.state.id);\r\n            \r\n             \r\n          }else{\r\n\r\n            if(this.internalStart ==0){\r\n              this.internalStart = 1; \r\n            }\r\n\r\n            if(this.started == false){\r\n              this.started = true; \r\n            }\r\n\r\n\r\n            if(this.internalChange === true){\r\n              this.internalChange = false; \r\n            }\r\n\r\n       \r\n\r\n\r\n          }\r\n\r\n\r\n\r\n        }\r\n      \r\n  \r\n\r\n    onPause = (event) => {\r\n\r\n            \r\n            if(this.internalChange === false  && this.started == true && this.internalStart ==1  ) {\r\n            console.log(\"This should not be seen, in the other window\")\r\n            this.props.pause(this.state.id);\r\n           \r\n             \r\n          }\r\n          \r\n          else{\r\n\r\n              if(this.internalStart ==0){\r\n                this.internalStart = 1; \r\n              }\r\n\r\n              if(this.started == false){\r\n                this.started = true; \r\n              }\r\n\r\n              if(this.newMemberPause == true){\r\n               this.newMemberPause = false; \r\n              \r\n              }\r\n\r\n\r\n              if(this.internalChange === true){\r\n                this.internalChange = false; \r\n              }\r\n          }\r\n  }\r\n\r\n    //nextProps that are being passed \r\n    componentWillReceiveProps =(nextProps)=>{\r\n\r\n\r\n        // This means the requres to change the play status is coming from a differnt person\r\n          \r\n            // Here you need to add the logic to deal with the a slider chage here\r\n\r\n          \r\n        \r\n            if(this.props.video!=null){\r\n              \r\n              if(this.props.video.id.videoId != nextProps.video.id.videoId){\r\n                this.started = false; \r\n              }\r\n\r\n            }\r\n          \r\n            console.log(nextProps.nPause); \r\n\r\n            // that means a video has been chosen\r\n           if(this.state.player[0]!=null && nextProps.nPause == 1 && this.state.player[0].playerInfo.playerState != -1){\r\n\r\n           \r\n              if(this.state.player[0]!=null){\r\n             \r\n                // A new member has joined, quick lets send them the current time thats being played\r\n              this.props.StateReset(); \r\n              this.internalChange = true;\r\n              console.log(\"IT HAS BEEN PAUSED: nPause == 1\")\r\n              this.state.player[0].pauseVideo();\r\n              this.props.reset(this.state.player[0].getCurrentTime());\r\n              this.props.Reset(); \r\n              \r\n             \r\n\r\n              \r\n\r\n              \r\n              }\r\n\r\n            }\r\n            \r\n          //  else{\r\n\r\n              //this will only ever be recvied by the other player, the only reason that this would have been fired before if the socket updated the props\r\n\r\n              if(this.state.player[0]!=null){\r\n                \r\n                this.internalChange = true;\r\n\r\n                if(nextProps.joined == true){\r\n                  \r\n                  console.log(\"\")\r\n                  this.props.joinedReset(); \r\n                  \r\n                  this.state.player[0].seekTo(nextProps.time).pauseVideo();\r\n                  this.started = true; \r\n                  \r\n              }\r\n\r\n\r\n                 else if(nextProps.PlayerState == \"PLAY\"){\r\n                      \r\n                      console.log(\"It got here... it played even when a new member joined\"); \r\n                      this.props.StateReset(); \r\n                      this.state.player[0].seekTo(nextProps.time).playVideo();\r\n                      \r\n                  }\r\n\r\n                  else if(nextProps.PlayerState == \"PAUSE\"){\r\n\r\n                    console.log(\"It got here... it played even when a new member joined\");  \r\n                      this.props.StateReset();\r\n                      this.state.player[0].pauseVideo();\r\n                      \r\n                  }\r\n\r\n\r\n              \r\n              }\r\n          \r\n            // -1 = unstarted\r\n            // 0 = ended \r\n            // 1 = playing \r\n            // 2 = paused\r\n            // 3 = buffering\r\n            // 5= video cued\r\n\r\n\r\n    \r\n     // }\r\n        \r\n        \r\n\r\n\r\n    }\r\n   \r\n   \r\n    \r\n     \r\n\r\n      Ready =(event) => {\r\n\r\n      \r\n        const player = this.state.player;\r\n        player.push(event.target);\r\n       \r\n        this.setState({\r\n          player: player,\r\n          duration:player[0].getDuration(), \r\n          id:this.props.id\r\n        });\r\n\r\n        console.log(\"Ready: Video-Detail -> This should come second\")\r\n        this.props.loaded(); \r\n      }\r\n\r\n\r\n\r\n  \r\n    render() {\r\n\r\n        const opts = {\r\n          height: '390',\r\n          width: '640',\r\n          playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n        \r\n            enablejsapi:1,\r\n          },\r\n        };\r\n\r\n        if(this.props.video==null){\r\n        return <div></div>; \r\n        }\r\n        \r\n\r\n        // You need to call, a call back functtion, which then will will emit to all other sockets, then on reciveing from \r\n        //Socket you can then click the button to play\r\n        //You need to send back event.target\r\n        return(\r\n\r\n            <div>\r\n\r\n                \r\n                <div  className=\"ui embed\">\r\n                <YouTube  onStateChange={this.videochange}  onPlay={this.onPlay} onPause={this.onPause} onReady={this.Ready}     videoId={this.props.video.id.videoId} opts={opts}  />;\r\n        \r\n                </div>\r\n\r\n             \r\n\r\n        \r\n                <div className = \"ui segment\">\r\n                <h4 className=\"ui header\">{this.props.video.snippet.title}</h4>\r\n                <p>{this.props.video.snippet.description}</p>\r\n                </div>\r\n\r\n              \r\n        </div>\r\n        );\r\n      }\r\n    \r\n    }\r\n  \r\n\r\n\r\nexport default VideoDetail;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\n\r\n class  ContinuousSlider extends React.Component {\r\n\r\n\r\n    state = {duration:2, value:0 }\r\n\r\n    componentWillReceiveProps =(nextProps)=>{\r\n\r\n        \r\n        this.setState({duration:nextProps.time});\r\n\r\n        \r\n\r\n    }\r\n\r\n     Format =(x) => {\r\n          \r\n\r\n        return Number.isNaN(x) ?  \"00:00:00\" : new Date(x * 1000).toISOString().substr(11, 8);  \r\n\r\n    }\r\n\r\n    handleSliderChange = (event, newValue)=> {\r\n\r\n        // Here, what we want to do, call a deeply nested call back function, which then notifies all the components of the new time\r\n    \r\n        this.setState({value: newValue});\r\n        this.props.newTime(newValue); \r\n\r\n\r\n      };\r\n    \r\n\r\n   \r\nrender(){\r\n\r\n   \r\n\r\n        return (\r\n            <div >\r\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n            </Typography>\r\n            <Slider\r\n                 \r\n                value={this.state.value}\r\n                max={this.state.duration}\r\n                aria-labelledby=\"discrete-slider-small-steps\"\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={x => this.Format(x) }\r\n                onChange={this.handleSliderChange}\r\n            />\r\n            </div>\r\n        );\r\n        \r\n}\r\n }\r\nexport default ContinuousSlider; ","import React from 'react'; \r\n\r\nimport Faker from 'faker';\r\n\r\nconst CommentDetail = (props) =>{\r\n\r\nreturn(\r\n\r\n  \r\n            <div className=\"comment\">\r\n                <a className=\"avatar\">\r\n                <img src={Faker.image.avatar()}/>\r\n                </a>\r\n                <div className=\"content\">\r\n                <a className=\"author\"> {props.name}    </a>\r\n                <div class=\"metadata\">\r\n                <div className=\"Date\">{props.time}</div>\r\n                    \r\n                </div>\r\n                <div class=\"text\">\r\n                    {props.content} \r\n                </div>\r\n                </div>\r\n            </div>\r\n           \r\n\r\n\r\n\r\n);\r\n\r\n\r\n\r\n}\r\nexport default CommentDetail; ","import React from 'react'; \r\n\r\n\r\nclass Message extends React.Component{\r\n\r\nstate = {term: ''}; \r\n\r\n change = (event) =>{\r\nthis.setState({term:event.target.value});\r\n};\r\n\r\n\r\n timeNow = () => {\r\n    var d = new Date(),\r\n      h = (d.getHours()<10?'0':'') + d.getHours(),\r\n      m = (d.getMinutes()<10?'0':'') + d.getMinutes();\r\n    return h + ':' + m;\r\n  }\r\n\r\n\r\nsubmit = (event) =>{\r\n\r\nevent.preventDefault(); \r\n\r\n// Here you want to pass in a object \r\n// Pass in the name of the user\r\n// Pass in the current time --> Dont know how to do that\r\n\r\nvar obj = {\r\n\"Content\": this.state.term, \r\n\"Name\": this.props.name,\r\n\"Time\":this.timeNow()\r\n};\r\n\r\nthis.props.msg(obj);\r\n\r\n\r\n\r\n};\r\n\r\nrender(){\r\n\r\nreturn(\r\n    <div className=\"search-bar ui segment\">\r\n        <form id=\"myForm\" onSubmit={this.submit}className =\"ui form\">\r\n            <div className=\"field\" >\r\n\r\n                <label>Send message</label>\r\n                <input \r\n                onChange={this.change }\r\n                value={this.state.term}\r\n                type=\"text\"/>\r\n            </div>\r\n        </form>\r\n       \r\n    </div>\r\n);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Message;","\r\nimport React from 'react'; \r\nimport CommentDetail from './CommentDetail';\r\n\r\nconst MessageList = (props) => {\r\n  const images = props.msglist.map(msg => {\r\n    return <CommentDetail content = {msg.Content} name ={msg.Name} time={msg.Time} />;\r\n  });\r\n\r\n  return <div className=\"ui comments\"> {images}</div>;\r\n};\r\n\r\nexport default MessageList;","import React from 'react'; \r\nimport './Login.css';\r\n\r\nclass Login extends React.Component{\r\n\r\n   \r\nstate = {term: ''}; \r\n\r\n\r\n    change = (event) =>{\r\n    this.setState({term:event.target.value});\r\n    };\r\n    \r\n    submit = (event) =>{\r\n        \r\n    event.preventDefault(); \r\n    \r\n    this.props.enter((this.state.term)); \r\n    \r\n    \r\n    };\r\n\r\n    submitName = (event) =>{\r\n        \r\n        event.preventDefault(); \r\n        \r\n        this.props.nameSubmission((this.state.term)); \r\n        \r\n        \r\n        };\r\n\r\n\r\n\r\n\r\n    createRoom = () => {\r\n\r\n        this.props.createRoom(); \r\n\r\n    };\r\n\r\n\r\n    determineRender  = () => {\r\n\r\n        if(this.props.roomStatus ==null){\r\n            \r\n            return(\r\n\r\n                <div class=\"ui middle aligned center aligned grid\">\r\n                        <div class=\"column\"> \r\n                            <h2 class=\"ui image header\">\r\n                                <div class=\"content\">\r\n                                    YouTube Party!\r\n                                </div>\r\n                            </h2>\r\n                           \r\n                                \r\n                                       <div> \r\n                                       <img src=\"https://img.icons8.com/clouds/150/000000/youtube-play.png\"/>\r\n                                            <div className=\"search-bar ui segment\">\r\n                                                \r\n                                                <form onSubmit={this.submit}className =\"ui form\">\r\n                                                    <div className=\"field\" >\r\n                                                    \r\n                                                    <div class=\"ui left icon input\">\r\n                                                    <i class=\"terminal icon\"/>\r\n                                                \r\n                                                        <input \r\n                                                        \r\n                                                        onChange={this.change }\r\n                                                        value={this.state.term}\r\n                                                        \r\n                                                        type=\"text\" placeholder=\"Enter Code\"/>\r\n                                                        \r\n        \r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            \r\n                                            </div>\r\n                                            </div>\r\n                              \r\n        \r\n                          \r\n                            \r\n                                    <div style ={{marginTop:'10px' }} onClick={this.submit} class=\"ui fluid large red submit button\">Join Session</div>\r\n                                    <div style ={{marginTop:'10px' }} onClick={this.createRoom}  class=\"ui fluid large white submit button\">Create Session</div>\r\n        \r\n                            \r\n        \r\n                            \r\n                        </div>\r\n                </div>\r\n        \r\n        \r\n        \r\n        \r\n            );\r\n\r\n\r\n\r\n        }else{\r\n\r\n          \r\n\r\n            return(\r\n\r\n                <div class=\"ui middle aligned center aligned grid\">\r\n                <div class=\"column\"> \r\n                    <h2 class=\"ui image header\">\r\n                        <div class=\"content\">\r\n                            YouTube Party!\r\n                        </div>\r\n                    </h2>\r\n                   \r\n                        \r\n                               <div> \r\n                               <img src=\"https://img.icons8.com/clouds/150/000000/youtube-play.png\"/>\r\n                                    <div className=\"search-bar ui segment\">\r\n                                        \r\n                                        <form onSubmit={this.submitName}className =\"ui form\">\r\n                                            <div className=\"field\" >\r\n                                            \r\n                                            <div class=\"ui left icon input\">\r\n                                            <i class=\"user icon\"/>\r\n                                        \r\n                                                <input \r\n                                                \r\n                                                onChange={this.change }\r\n                                                value={this.state.term}\r\n                                                \r\n                                                type=\"text\" placeholder=\"Enter Name\"/>\r\n                                                \r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </form>\r\n                                    \r\n                                    </div>\r\n                                    </div>\r\n                      \r\n\r\n                  \r\n                    \r\n                            <div style ={{marginTop:'10px' }} onClick={this.submitName} class=\"ui fluid large green submit button\">Continue!</div>\r\n                        \r\n\r\n                    \r\n\r\n                    \r\n                </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            );\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        \r\n    return this.determineRender();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Login; ","\r\nimport React from 'react'; \r\nimport CommentDetail from './CommentDetail';\r\n\r\nconst MemberList = (props) => {\r\n    \r\n  \r\n  const images = props.msglist.map(msg => {\r\n    console.log(msg)\r\n    if(msg!=null){\r\n    return <CommentDetail content = {\"joined\"} name ={msg}  />;\r\n    }\r\n  });\r\n\r\n  return <div className=\"ui comments\"> {images}</div>;\r\n\r\n};\r\n\r\nexport default MemberList;","import React from 'react'; \r\nimport SearchBar from './SearchBar'; \r\nimport youtube from '../api/youtube';\r\nimport VideoList from './VideoList';\r\nimport VideoDetail from './VideoDetail';\r\nimport CommentDetail from './CommentDetail';\r\nimport io from 'socket.io-client'\r\nimport Message from './Message'; \r\nimport MessageList from './MessageList';\r\nimport Login from './Login'; \r\nimport './App.css';\r\nimport MemberList from './MemberList'; \r\n//\"https://agile-mountain-68964.herokuapp.com/\"\r\n//\"http://localhost:8080\"\r\nconst socket = io(\"https://agile-mountain-68964.herokuapp.com/\"); \r\n//\"https://agile-mountain-68964.herokuapp.com/\"\r\n\r\n// There might be some PURE aids with the rooms here\r\n\r\nclass App extends React.Component {\r\n    state = {videos: [], \r\n        selectedVideo:null, \r\n        data:null, \r\n        socketId:null, \r\n        id:Math.floor(Math.random() * 100000), \r\n         members:[], \r\n         messages:[],\r\n         newTime:0, \r\n         time:0, \r\n         onChange:-1,\r\n         PlayerState:\"\",\r\n         target:[], \r\n         room:null, \r\n         loaded:false, \r\n         error:0,\r\n         newMemberPause:0,  \r\n         name:null};\r\n\r\n    joined = false;\r\n    called = false; \r\n    \r\n    loaded = () => {\r\n\r\n        this.setState({loaded:true});\r\n\r\n        // if joined is TRUE, this is when we send the message\r\n        console.log(\"This loaded:\"); \r\n       \r\n        if(this.called == true){\r\n            \r\n            console.log(\"This loaded: this.state.joined == true\"); \r\n            socket.emit('newMemberPause', this.state.room); \r\n            this.called = false; \r\n        }\r\n\r\n    }\r\n\r\n    send = (list) => {\r\n\r\n        //You are sendign the array of messages\r\n        socket.emit('change color', list, this.state.room) \r\n      }\r\n    // When a user makes a search query, it is emmited to the other sockets, then once it is recived again, it will be rendered\r\n    EmitSearch = (result) =>{\r\n        socket.emit('search', result, this.state.room);\r\n    }\r\n      componentWillMount = () => {\r\n          socket.on('change color', (col) => {\r\n              // Here Im updating the messages array, to be the new messages that I have recived\r\n              this.setState({messages:col});\r\n          })\r\n          // Setting the state with the search result\r\n          socket.on('search', (result) => {  \r\n            this.setState({\r\n                videos: result.data.items,\r\n                selectedVideo:result.data.items[0]\r\n              });   \r\n        })\r\n        socket.on('select', (video) => {  \r\n            this.setState({selectedVideo:video});\r\n        })\r\n        socket.on('play', (time, id) => {\r\n            console.log(\"From APP.js: Play will now setState\")\r\n            this.setState({time:time, PlayerState:\"PLAY\", id:id})\r\n        })\r\n        socket.on('pause', (id) => {\r\n            this.setState({PlayerState:\"PAUSE\", id:id})\r\n        })\r\n        socket.on('memberTime', (times) => {\r\n\r\n            // If we are really a new member reciving this time\r\n            if(this.state.joined ==true){\r\n\r\n                console.log(times); \r\n                this.setState({time:times});\r\n\r\n            }\r\n            \r\n\r\n\r\n        })\r\n        socket.on('newTime', (newTime) => {\r\n            this.setState({newTime:newTime})\r\n        })\r\n        socket.on('onChange', (state) => {\r\n            this.setState({onChange:state})\r\n        })\r\n        socket.on('newMemberPause', () => {\r\n            // Now this is used to update the props, to notify everyone that a new member has joined\r\n            this.setState({newMemberPause:1})\r\n        })\r\n       \r\n        socket.on('n', (SelectedVideo) => {\r\n\r\n            if(this.state.selectedVideo != SelectedVideo){   \r\n                this.setState({selectedVideo:SelectedVideo})\r\n                console.log(\"n: setting joined:true, this should come first\")\r\n                this.joined= true;  \r\n            }\r\n\r\n            \r\n            \r\n        })\r\n\r\n        socket.on('newMember', (list) => {\r\n            if(this.state.selectedVideo!= null){   \r\n               this.newMemberVideo();  \r\n            }\r\n            console.log(list); \r\n            this.setState({members:list}); \r\n        })\r\n\r\n        socket.on('remove', (list) => {\r\n           \r\n            console.log(list); \r\n            this.setState({members:list}); \r\n        })\r\n\r\n\r\n        socket.on('enter', (term, ID) => {\r\n            if(term!=\"FAIL\"){\r\n            // So here the room will no longer be null\r\n            // Here when this happens you need to\r\n            this.setState({room:term})\r\n            this.setState({socketId:ID})\r\n            }else{\r\n                // Here you attempted to enter a code that doesnt exist\r\n                console.log(\"The code you have entered does not exist in the data base, please try again\"); \r\n                // IF the code doesnt work, we want to display a message, with an x button, that indciates the wrong code was used\r\n                this.setState({error:1}); \r\n            }\r\n        })\r\n\r\n\r\n      }\r\n\r\n      newMemberVideo = () => {\r\n        console.log(this.state.room);\r\n        \r\n        socket.emit('n', this.state.selectedVideo, this.state.room);\r\n\r\n      }\r\n\r\n    sendMessage = (message) =>{\r\n        \r\n        // You take this message that is given, and update the state of the messages\r\n        const list = this.state.messages;\r\n        list.push(message); \r\n\r\n        //This sends the current list of the messages to all the sockets\r\n        this.send(list)\r\n\r\n    }\r\n\r\n\r\n    pressPlay = (time, id) => {\r\n      // From here it will emit to all the other sokcets, execpt this one\r\n       \r\n        socket.emit('play',time, id, this.state.room)\r\n    }\r\n\r\n    pressPause = (id) => {\r\n        // From here it will emit to all the other sokcets, execpt this one\r\n          socket.emit('pause', id, this.state.room)\r\n      }\r\n\r\n    newTime = (newTime) => {\r\n        socket.emit('newTime', newTime, this.state.room)\r\n    }\r\n\r\n    Reset = () =>{\r\n        this.setState({newMemberPause:0}); \r\n    }\r\n\r\n \r\n    search = async (term)=>{\r\n        //The SearchBar calls the search funciton with the term\r\n        // And here we will make the api request\r\n        \r\n        const result = await youtube.get(\"/search\", {\r\n            params: {\r\n              q: term,\r\n              part: \"snippet\",\r\n               type: 'video',\r\n              maxResults: 5,\r\n              key: 'AIzaSyBSAzBSy4bhfG8JaCmptEDdreLpQXdAAbQ'            }\r\n          });\r\n          \r\n          console.log(result);\r\n          this.EmitSearch(result);\r\n          \r\n    }\r\n\r\n\r\nenter = (term) => {\r\n   \r\n    console.log(term); \r\n    socket.emit('enter', term); \r\n}\r\n\r\nnameSubmission = (name) => {\r\n   \r\n   \r\n    this.setState({name:name}); \r\n\r\n    // What we want to do is, have the logic to check the length og the list\r\n    socket.emit(\"newMember\", name,this.state.socketId, this.state.room); \r\n\r\n}\r\n\r\n\r\nonChange = (state) => {\r\n\r\n    socket.emit(\"onChange\", state, this.state.room);\r\n\r\n}\r\n\r\nreset = (time) => {\r\n\r\n   \r\n    socket.emit(\"memberTime\", time, this.state.room);\r\n\r\n}\r\n\r\n\r\nStateReset = () => {\r\n\r\n    this.setState({PlayerState:\"\"}); \r\n}\r\n\r\n\r\ncreateRoom = () => {\r\n    // When the create room session button is pressed, we want to emit that we want to create a new room\r\n    console.log(\"Ive been clic\")\r\n    socket.emit('createRoom');\r\n}\r\n// This is a function\r\nonVideoSelect = (video) =>{\r\n    socket.emit('select', video, this.state.room) \r\n}\r\n\r\nclose = ( ) => {\r\n\r\n    this.setState({error:0}); \r\n}\r\n\r\n\r\nErrorDecider = () =>{\r\n\r\n\r\n    if(this.state.error == 1){\r\n        return(\r\n            <div className=\"cont\">\r\n                <div className=\"ui segment\" >\r\n\r\n                \r\n                <Login enter={this.enter} createRoom={this.createRoom} roomStatus={null}/>\r\n                </div>\r\n\r\n                <div class=\"ui negative message\">\r\n                        <i onClick={this.close} class=\"close icon\"></i>\r\n                        <div class=\"header\">\r\n                            Invalid room code!\r\n                        </div>\r\n                        <p>Try again, or create new session. \r\n                        </p></div>\r\n\r\n\r\n            </div>\r\n        );\r\n            }else{\r\n\r\n                return(\r\n                    <div className=\"cont\">\r\n                            <div className=\"ui segment\" >\r\n                            <Login enter={this.enter} createRoom={this.createRoom} roomStatus={null}/>\r\n                            </div>\r\n                    </div>\r\n\r\n                );\r\n\r\n\r\n}\r\n\r\n}\r\n\r\njoinedReset = () => {\r\n\r\n   console.log(\"joinedReset: Called\")\r\n    this.joined = false; \r\n    this.called = true; \r\n}\r\n\r\njoined = () => {\r\n\r\n    socket.emit('joined', this.state.room);\r\n}\r\n\r\nEnterName = () => {\r\n\r\n    // If the name is null, then we must prompt the user to enter in their name, which will\r\n    if(this.state.name == null){\r\n        \r\n        // pass in \r\n        return(\r\n        <div className= \"cont\">\r\n            <div className=\"ui segment\">\r\n            <Login nameSubmission={this.nameSubmission} roomStatus={this.state.room}/>\r\n            </div>\r\n\r\n        </div>\r\n        );\r\n\r\n    }else{\r\n\r\n        // Right here, we want to emit to all rooms that a new memebr has joined\r\n      \r\n\r\n        return(\r\n\r\n            <div className=\"ui container\" style ={{marginTop:'10px' }}>\r\n                <h4 className=\"ui header\"> ROOM CODE: {this.state.room}</h4>\r\n                <SearchBar Search={this.search} />\r\n                \r\n                \r\n                <div className=\"ui grid\">\r\n                    <div className=\"ui row\">\r\n    \r\n                        <div  className=\"eleven wide column\">\r\n                            \r\n                            <VideoDetail loaded={this.loaded} Reset={this.Reset}joined={this.joined} joinedReset={this.joinedReset} StateReset={this.StateReset}reset={this.reset } nPause={this.state.newMemberPause}   onChange={this.onChange} PlayerState={this.state.PlayerState}  State={this.state.onChange}  updatedTime={this.state.newTime} newTime ={this.newTime} id={this.state.id} time ={this.state.time}  pause={this.pressPause} play={this.pressPlay} video={this.state.selectedVideo}/>\r\n                            <h4 className=\"ui header\"> Chat Room</h4>\r\n                                \r\n                                    {this.state.data}\r\n                                <div className=\"ui segment\"> \r\n                                <MessageList  msglist={this.state.messages}/>\r\n                                \r\n                                </div>\r\n                                <Message msg={this.sendMessage} name={this.state.name}/>\r\n    \r\n    \r\n    \r\n                        </div>\r\n    \r\n                        <div className=\"five wide column\">\r\n                                <VideoList videos={this.state.videos} onVideoSelect = {this.onVideoSelect}/>\r\n                            <div className=\"ui segment\"> \r\n                                <h4 className=\"ui header\"> Connected members</h4>\r\n                                <MemberList msglist={this.state.members} name={this.state.name}/>\r\n                                </div>\r\n                        </div>\r\n                    </div>  \r\n                </div>\r\n               \r\n        \r\n             </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nrender(){\r\n    if(this.state.room == null){\r\n        return this.ErrorDecider(); \r\n    }\r\n    \r\n//Here the room is no longer null, we must once again parse this out into its own logic to allow users to enter their name\r\n    return this.EnterName(); \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App; ","import React  from 'react'; \r\nimport ReactDOM from 'react-dom'; \r\nimport App from './comp/App'; \r\n\r\nReactDOM.render(\r\n\r\n<App/>, document.querySelector('#root')\r\n\r\n);\r\n\r\n"],"sourceRoot":""}