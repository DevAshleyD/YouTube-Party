{"version":3,"sources":["comp/SearchBar.js","api/youtube.js","comp/VideoItem.js","comp/VideoList.js","comp/VideoDetail.js","comp/ContinuousSlider.js","comp/CommentDetail.js","comp/Login.js","comp/Message.js","comp/MemberList.js","comp/Chat.js","comp/Loading.js","comp/App.js","index.js"],"names":["SearchBar","state","term","change","event","setState","target","value","submit","preventDefault","props","Search","className","onSubmit","this","onChange","type","React","Component","axios","create","baseURL","VideoItem","vid","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","title","VideoList","videos","vidlist","map","video","VideoDetail","id","player","duration","internalChange","started","newMemberPause","internalStart","videochange","playerInfo","playerState","play","currentTime","messageSent","onPlay","onPause","console","log","pause","componentWillReceiveProps","nextProps","videoId","nPause","StateReset","pauseVideo","reset","getCurrentTime","Reset","joined","joinedReset","seekTo","time","PlayerState","playVideo","Ready","push","getDuration","loaded","onStateChange","onReady","opts","height","width","playerVars","enablejsapi","description","CommentDetail","size","color","Avatar","getRandomColor","name","class","content","Login","enter","submitName","nameSubmission","createRoom","determineRender","roomStatus","placeholder","style","marginTop","MemberList","images","msglist","msg","Chat","newText","addResponseMessage","handleNewUserMessage","newMessage","text","subtitle","spring","damping","stiffness","initialColors","Loading","useState","colors","setColors","useEffect","setTimeout","shuffle","background","li","key","layoutTransition","socket","io","App","selectedVideo","data","socketId","Math","floor","random","members","messages","newTime","room","error","called","emit","send","list","EmitSearch","result","componentWillMount","on","col","items","times","SelectedVideo","newMemberVideo","message","String","ID","document","getElementById","borderColor","sendMessage","pressPlay","pressPause","search","a","youtube","get","params","q","part","maxResults","close","Header","href","ErrMsg","Footer","ErrorDecider","incor","textReset","EnterName","marginBottom","State","updatedTime","newtext","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.68a3d70c.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './App.css';\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n\r\nstate = {term: ''}; \r\n\r\n change = (event) =>{\r\nthis.setState({term:event.target.value});\r\n};\r\n\r\nsubmit = (event) =>{\r\nevent.preventDefault(); \r\nthis.props.Search(this.state.term);\r\n//this.props.Search.search(this.state.term);\r\n\r\n//To Do this term will be used to call the YouTube api\r\n\r\n};\r\n\r\nrender(){\r\n\r\nreturn(\r\n    <div className=\"style\">\r\n        <form onSubmit={this.submit}className =\"ui form rounded\">\r\n            <div className=\"field\" >\r\n\r\n                <label>Search by Title/URL</label>\r\n                <input \r\n                onChange={this.change }\r\n                value={this.state.term}\r\n                type=\"text\"/>\r\n            </div>\r\n        </form>\r\n       \r\n    </div>\r\n);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default SearchBar;","import axios from \"axios\";\r\n\r\n \r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n});","import React from 'react';\r\nimport './vi.css';\r\nconst VideoItem = ({vid, onVideoSelect}) =>{\r\n  \r\n    return (\r\n    \r\n    <div onClick={() => onVideoSelect(vid)}className=\"video-item item\">\r\n        <img className=\"ui image\"src={vid.snippet.thumbnails.medium.url}/>\r\n        <div className=\"content\">\r\n        <div className=\"header\">  {vid.snippet.title}</div>\r\n        </div>\r\n\r\n\r\n    </div>);\r\n\r\n};\r\n\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './VideoItem'\r\nconst VideoList  = ({videos,  onVideoSelect}) =>{\r\n\r\n    const vidlist = videos.map((video)=>{\r\n\r\n        return <VideoItem vid = {video} onVideoSelect = {onVideoSelect}/>\r\n\r\n    });\r\n\r\n    return(\r\n\r\n        <div className=\"ui relaxed divided list\">\r\n\r\n            {vidlist}\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default VideoList; ","import React from 'react'; \r\nimport YouTube from 'react-youtube';\r\nimport Slider from './ContinuousSlider';\r\nimport SearchBar from './SearchBar';\r\n\r\n// You need to pass a funciton to VideoDetail \r\n// Which will then be called from inside, \r\n//props.video.id.videoId ---> This  is the link to the video\r\n\r\n\r\nclass VideoDetail extends React.Component{\r\n\r\n    state = {id:0, player:[], duration:0}; \r\n\r\n    //internalChange = false; \r\n    \r\n    internalChange = false\r\n    started  = false; \r\n    newMemberPause = false;\r\n    internalStart = 1; \r\n    \r\n    videochange =(event)=> {\r\n\r\n      // Here you need to emit a event that \r\n          \r\n      if(event.target.playerInfo.playerState == 3 && this.started == false){\r\n        this.props.play(event.target.playerInfo.currentTime, this.state.id);\r\n       this.started = true; \r\n       this.messageSent = true;\r\n       this.internalStart = 0; \r\n\r\n        }\r\n  \r\n      }\r\n      \r\n\r\n    onPlay =(event)=>{\r\n\r\n        \r\n\r\n          \r\n          \r\n          if(this.internalChange === false  && this.started == true && this.internalStart ==1) {\r\n         \r\n            this.props.play(event.target.playerInfo.currentTime, this.state.id);\r\n            \r\n             \r\n          }else{\r\n\r\n            if(this.internalStart ==0){\r\n              this.internalStart = 1; \r\n            }\r\n\r\n            if(this.started == false){\r\n              this.started = true; \r\n            }\r\n\r\n\r\n            if(this.internalChange === true){\r\n              this.internalChange = false; \r\n            }\r\n\r\n       \r\n\r\n\r\n          }\r\n\r\n\r\n\r\n        }\r\n      \r\n  \r\n\r\n    onPause = (event) => {\r\n\r\n            \r\n            if(this.internalChange === false  && this.started == true && this.internalStart ==1  ) {\r\n            console.log(\"This should not be seen, in the other window\")\r\n            this.props.pause(this.state.id);\r\n           \r\n             \r\n          }\r\n          \r\n          else{\r\n\r\n              if(this.internalStart ==0){\r\n                this.internalStart = 1; \r\n              }\r\n\r\n              if(this.started == false){\r\n                this.started = true; \r\n              }\r\n\r\n              if(this.newMemberPause == true){\r\n               this.newMemberPause = false; \r\n              \r\n              }\r\n\r\n\r\n              if(this.internalChange === true){\r\n                this.internalChange = false; \r\n              }\r\n          }\r\n  }\r\n\r\n    //nextProps that are being passed \r\n    componentWillReceiveProps =(nextProps)=>{\r\n\r\n\r\n        // This means the requres to change the play status is coming from a differnt person\r\n          \r\n            // Here you need to add the logic to deal with the a slider chage here\r\n\r\n          \r\n        \r\n            if(this.props.video!=null){\r\n              \r\n              if(this.props.video.id.videoId != nextProps.video.id.videoId){\r\n                this.started = false; \r\n              }\r\n\r\n            }\r\n          \r\n            console.log(nextProps.nPause); \r\n\r\n            // that means a video has been chosen\r\n           if(this.state.player[0]!=null && nextProps.nPause == 1 && this.state.player[0].playerInfo.playerState != -1){\r\n\r\n           \r\n              if(this.state.player[0]!=null){\r\n             \r\n                // A new member has joined, quick lets send them the current time thats being played\r\n              this.props.StateReset(); \r\n              this.internalChange = true;\r\n              console.log(\"IT HAS BEEN PAUSED: nPause == 1\")\r\n              this.state.player[0].pauseVideo();\r\n              this.props.reset(this.state.player[0].getCurrentTime());\r\n              this.props.Reset(); \r\n              \r\n             \r\n\r\n              \r\n\r\n              \r\n              }\r\n\r\n            }\r\n            \r\n          //  else{\r\n\r\n              //this will only ever be recvied by the other player, the only reason that this would have been fired before if the socket updated the props\r\n\r\n              if(this.state.player[0]!=null){\r\n                \r\n                this.internalChange = true;\r\n\r\n                if(nextProps.joined == true){\r\n                  \r\n                  console.log(\"\")\r\n                  this.props.joinedReset(); \r\n                  \r\n                  this.state.player[0].seekTo(nextProps.time).pauseVideo();\r\n                  this.started = true; \r\n                  \r\n              }\r\n\r\n\r\n                 else if(nextProps.PlayerState == \"PLAY\"){\r\n                      \r\n                      console.log(\"It got here... it played even when a new member joined\"); \r\n                      this.props.StateReset(); \r\n                      this.state.player[0].seekTo(nextProps.time).playVideo();\r\n                      \r\n                  }\r\n\r\n                  else if(nextProps.PlayerState == \"PAUSE\"){\r\n\r\n                    console.log(\"It got here... it played even when a new member joined\");  \r\n                      this.props.StateReset();\r\n                      this.state.player[0].pauseVideo();\r\n                      \r\n                  }\r\n\r\n\r\n              \r\n              }\r\n          \r\n            // -1 = unstarted\r\n            // 0 = ended \r\n            // 1 = playing \r\n            // 2 = paused\r\n            // 3 = buffering\r\n            // 5= video cued\r\n\r\n\r\n    \r\n     // }\r\n        \r\n        \r\n\r\n\r\n    }\r\n   \r\n   \r\n    \r\n     \r\n\r\n      Ready =(event) => {\r\n\r\n      \r\n        const player = this.state.player;\r\n        player.push(event.target);\r\n       \r\n        this.setState({\r\n          player: player,\r\n          duration:player[0].getDuration(), \r\n          id:this.props.id\r\n        });\r\n\r\n        console.log(\"Ready: Video-Detail -> This should come second\")\r\n        this.props.loaded(); \r\n      }\r\n\r\n\r\n\r\n  \r\n    render() {\r\n\r\n        const opts = {\r\n          height: '390',\r\n          width: '640',\r\n          playerVars: {\r\n            // https://developers.google.com/youtube/player_parameters\r\n        \r\n            enablejsapi:1,\r\n          },\r\n        };\r\n\r\n        if(this.props.video==null){\r\n        return <div></div>; \r\n        }\r\n        \r\n\r\n        // You need to call, a call back functtion, which then will will emit to all other sockets, then on reciveing from \r\n        //Socket you can then click the button to play\r\n        //You need to send back event.target\r\n        return(\r\n\r\n            <div>\r\n\r\n                \r\n                <div  className=\"ui embed\">\r\n                <YouTube  onStateChange={this.videochange}  onPlay={this.onPlay} onPause={this.onPause} onReady={this.Ready}     videoId={this.props.video.id.videoId} opts={opts}  />;\r\n        \r\n                </div>\r\n\r\n             \r\n\r\n        \r\n                <div className = \"ui segment\">\r\n                <h4 className=\"ui header\">{this.props.video.snippet.title}</h4>\r\n                <p>{this.props.video.snippet.description}</p>\r\n                </div>\r\n\r\n              \r\n        </div>\r\n        );\r\n      }\r\n    \r\n    }\r\n  \r\n\r\n\r\nexport default VideoDetail;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\n\r\n class  ContinuousSlider extends React.Component {\r\n\r\n\r\n    state = {duration:2, value:0 }\r\n\r\n    componentWillReceiveProps =(nextProps)=>{\r\n\r\n        \r\n        this.setState({duration:nextProps.time});\r\n\r\n        \r\n\r\n    }\r\n\r\n     Format =(x) => {\r\n          \r\n\r\n        return Number.isNaN(x) ?  \"00:00:00\" : new Date(x * 1000).toISOString().substr(11, 8);  \r\n\r\n    }\r\n\r\n    handleSliderChange = (event, newValue)=> {\r\n\r\n        // Here, what we want to do, call a deeply nested call back function, which then notifies all the components of the new time\r\n    \r\n        this.setState({value: newValue});\r\n        this.props.newTime(newValue); \r\n\r\n\r\n      };\r\n    \r\n\r\n   \r\nrender(){\r\n\r\n   \r\n\r\n        return (\r\n            <div >\r\n            <Typography id=\"discrete-slider-small-steps\" gutterBottom>\r\n            </Typography>\r\n            <Slider\r\n                 \r\n                value={this.state.value}\r\n                max={this.state.duration}\r\n                aria-labelledby=\"discrete-slider-small-steps\"\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={x => this.Format(x) }\r\n                onChange={this.handleSliderChange}\r\n            />\r\n            </div>\r\n        );\r\n        \r\n}\r\n }\r\nexport default ContinuousSlider; ","import React from 'react'; \r\n\r\n\r\nimport Avatar from 'react-avatar';\r\n \r\n\r\n\r\nconst CommentDetail = (props) =>{\r\n\r\nreturn(\r\n\r\n  \r\n            <div className=\"comment\">\r\n                <a className=\"avatar\">\r\n                <Avatar size=\"40\" color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue'])} name={props.name} />\r\n                </a>\r\n                <div className=\"content\">\r\n                <a className=\"author\"> {props.name}    </a>\r\n                <div class=\"metadata\">\r\n                <div className=\"Date\">{props.time}</div>\r\n                    \r\n                </div>\r\n                <div class=\"text\">\r\n                    {props.content} \r\n                </div>\r\n                </div>\r\n            </div>\r\n           \r\n\r\n\r\n\r\n);\r\n\r\n\r\n\r\n}\r\nexport default CommentDetail; ","import React from 'react'; \r\nimport './Login.css';\r\n\r\nclass Login extends React.Component{\r\n\r\n   \r\nstate = {term: ''}; \r\n\r\n\r\n    change = (event) =>{\r\n    this.setState({term:event.target.value});\r\n    };\r\n    \r\n    submit = (event) =>{\r\n        \r\n    event.preventDefault(); \r\n    \r\n    this.props.enter((this.state.term)); \r\n    \r\n    \r\n    };\r\n\r\n    submitName = (event) =>{\r\n        \r\n        event.preventDefault(); \r\n        \r\n        this.props.nameSubmission((this.state.term)); \r\n        \r\n        \r\n        };\r\n\r\n\r\n\r\n\r\n    createRoom = () => {\r\n\r\n        this.props.createRoom(); \r\n\r\n    };\r\n\r\n\r\n\r\n    determineRender  = () => {\r\n\r\n        if(this.props.roomStatus ==null){\r\n            \r\n            return(\r\n\r\n                <div class=\"ui middle aligned center aligned grid\">\r\n                        <div      class=\"column log\"> \r\n                            <h2 class=\"ui image header\">\r\n                                <div class=\"content\">\r\n                                    YouTube Party!\r\n                                </div>\r\n                            </h2>\r\n                           \r\n                                \r\n                                       <div> \r\n                                       <img src=\"https://img.icons8.com/clouds/150/000000/youtube-play.png\"/>\r\n                                            <div className=\"search-bar\">\r\n                                                \r\n                                                <form onSubmit={this.submit}className =\"ui form\">\r\n                                                    <div className=\"field\" >\r\n                                                    \r\n                                                    <div class=\"ui left icon input\">\r\n                                                    <i class=\"terminal icon\"/>\r\n                                                \r\n                                                        <input id=\"searchid\"\r\n                                                        \r\n                                                        onChange={this.change }\r\n                                                        value={this.state.term}\r\n                                                        \r\n                                                        type=\"text\" placeholder=\"Enter Code\"/>\r\n                                                        \r\n        \r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            \r\n                                            </div>\r\n                                            </div>\r\n                              \r\n        \r\n                          \r\n                            \r\n                                    <div style ={{marginTop:'10px' }} onClick={this.submit} class=\"ui fluid large red submit button\">Join Session</div>\r\n                                    <div style ={{marginTop:'10px' }} onClick={this.createRoom}  class=\"ui fluid large white submit button\">Create Session</div>\r\n        \r\n                            \r\n        \r\n                            \r\n                        </div>\r\n                </div>\r\n        \r\n        \r\n        \r\n        \r\n            );\r\n\r\n      \r\n\r\n\r\n        }\r\n        else{\r\n            return(\r\n\r\n                <div class=\"ui middle aligned center aligned grid\">\r\n                <div class=\"column log\"> \r\n                    <h2 class=\"ui image header\">\r\n                        <div class=\"content\">\r\n                            YouTube Party!\r\n                        </div>\r\n                    </h2>\r\n                   \r\n                        \r\n                               <div> \r\n                               <img src=\"https://img.icons8.com/clouds/150/000000/youtube-play.png\"/>\r\n                                    <div className=\"search-bar\">\r\n                                        \r\n                                        <form onSubmit={this.submitName}className =\"ui form\">\r\n                                            <div className=\"field\" >\r\n                                            \r\n                                            <div class=\"ui left icon input\">\r\n                                            <i class=\"user icon\"/>\r\n                                        \r\n                                                <input \r\n                                                \r\n                                                onChange={this.change }\r\n                                                value={this.state.term}\r\n                                                \r\n                                                type=\"text\" placeholder=\"Enter Name\"/>\r\n                                                \r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </form>\r\n                                    \r\n                                    </div>\r\n                                    </div>\r\n                      \r\n\r\n                  \r\n                    \r\n                            <div style ={{marginTop:'10px' }} onClick={this.submitName} class=\"ui fluid large green submit button\">Continue!</div>\r\n                        \r\n\r\n                    \r\n\r\n                    \r\n                </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            );\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        \r\n    return this.determineRender();\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Login; ","import React from 'react'; \r\n\r\n\r\nclass Message extends React.Component{\r\n\r\nstate = {term: ''}; \r\n\r\n change = (event) =>{\r\nthis.setState({term:event.target.value});\r\n};\r\n\r\n\r\n timeNow = () => {\r\n    var d = new Date(),\r\n      h = (d.getHours()<10?'0':'') + d.getHours(),\r\n      m = (d.getMinutes()<10?'0':'') + d.getMinutes();\r\n    return h + ':' + m;\r\n  }\r\n\r\n\r\nsubmit = (event) =>{\r\n\r\nevent.preventDefault(); \r\n\r\n// Here you want to pass in a object \r\n// Pass in the name of the user\r\n// Pass in the current time --> Dont know how to do that\r\n\r\nvar obj = {\r\n\"Content\": this.state.term, \r\n\"Name\": this.props.name,\r\n\"Time\":this.timeNow()\r\n};\r\n\r\nthis.props.msg(obj);\r\n\r\n\r\n\r\n};\r\n\r\nrender(){\r\n\r\nreturn(\r\n    <div className=\"search-bar ui segment\">\r\n        <form id=\"myForm\" onSubmit={this.submit}className =\"ui form\">\r\n            <div className=\"field\" >\r\n\r\n                <label>Send message</label>\r\n                <input \r\n                onChange={this.change }\r\n                value={this.state.term}\r\n                type=\"text\"/>\r\n            </div>\r\n        </form>\r\n       \r\n    </div>\r\n);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Message;","\r\nimport React from 'react'; \r\nimport CommentDetail from './CommentDetail';\r\n\r\nconst MemberList = (props) => {\r\n    \r\n  \r\n  const images = props.msglist.map(msg => {\r\n    console.log(msg)\r\n    if(msg!=null){\r\n    return <CommentDetail content = {\"joined\"} name ={msg}  />;\r\n    }\r\n  });\r\n\r\n  return <div className=\"ui comments\"> {images}</div>;\r\n\r\n};\r\n\r\nexport default MemberList;","import React, { Component } from 'react';\r\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage } from 'react-chat-widget';\r\n\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport './App.css';\r\n\r\nclass Chat extends Component {\r\n  componentDidMount() {\r\n    addResponseMessage(\"Welcome to this awesome chat!\");\r\n  }\r\n\r\n  componentWillReceiveProps =(nextProps) => {\r\n\r\n    if(nextProps!=null&& nextProps.newText!=null &&nextProps.newText!=\"\") {\r\n\r\n        if(nextProps.newText!=\"\"){\r\n\r\n            addResponseMessage(nextProps.newText);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleNewUserMessage = (newMessage) => {\r\n    console.log(`New message incomig! ${newMessage}`);\r\n    // Now send the message throught the backend API\r\n\r\n    this.props.text(newMessage)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Widget\r\n          handleNewUserMessage={this.handleNewUserMessage}\r\n          title=\"Welcome to the Chat!\"\r\n          subtitle=\"Have Fun!\"\r\n        />\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default Chat;","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { shuffle } from \"lodash\";\r\n\r\nconst spring = {\r\n  type: \"spring\",\r\n  damping: 20,\r\n  stiffness: 300\r\n};\r\n\r\nexport const Loading = () => {\r\n  const [colors, setColors] = useState(initialColors);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => setColors(shuffle(colors)), 1000);\r\n  }, [colors]);\r\n\r\n  return (\r\n    <ul>\r\n      {colors.map(background => (\r\n        <motion.li\r\n          key={background}\r\n          layoutTransition={spring}\r\n          style={{ background }}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst initialColors = [\"#f70d1a\", \"#ff726f\", \"#ffc0cb\", \"#ffcccb \"];\r\n\r\nexport default Loading;","import React from 'react'; \r\nimport SearchBar from './SearchBar'; \r\nimport youtube from '../api/youtube';\r\nimport VideoList from './VideoList';\r\nimport VideoDetail from './VideoDetail';\r\nimport CommentDetail from './CommentDetail';\r\nimport io from 'socket.io-client'\r\nimport Message from './Message'; \r\nimport MessageList from './MessageList';\r\nimport Login from './Login'; \r\nimport './App.css';\r\nimport MemberList from './MemberList'; \r\nimport Chat from \"./Chat\"\r\nimport Loading from \"./Loading\"\r\n\r\n//\"https://agile-mountain-68964.herokuapp.com/\"\r\n//\"http://localhost:8080\"\r\nconst socket = io(\"https://agile-mountain-68964.herokuapp.com/\"); \r\n//\"https://agile-mountain-68964.herokuapp.com/\"\r\n\r\n// There might be some PURE aids with the rooms here\r\n\r\nclass App extends React.Component {\r\n    state = {videos: [], \r\n        selectedVideo:null, \r\n        data:null, \r\n        socketId:null, \r\n        id:Math.floor(Math.random() * 100000), \r\n         members:[], \r\n         messages:[],\r\n         newTime:0, \r\n         time:0, \r\n         onChange:-1,\r\n         PlayerState:\"\",\r\n         target:[], \r\n         room:null, \r\n         loaded:false, \r\n         error:0,\r\n         newMessage:null, \r\n         newMemberPause:0,  \r\n         name:null};\r\n\r\n    joined = false;\r\n    called = false; \r\n    \r\n    loaded = () => {\r\n\r\n        this.setState({loaded:true});\r\n\r\n        // if joined is TRUE, this is when we send the message\r\n        console.log(\"This loaded:\"); \r\n       \r\n        if(this.called == true){\r\n            \r\n            console.log(\"This loaded: this.state.joined == true\"); \r\n            socket.emit('newMemberPause', this.state.room); \r\n            this.called = false; \r\n        }\r\n\r\n    }\r\n\r\n    send = (list) => {\r\n\r\n        //You are sendign the array of messages\r\n        socket.emit('change color', list, this.state.room) \r\n      }\r\n    // When a user makes a search query, it is emmited to the other sockets, then once it is recived again, it will be rendered\r\n    EmitSearch = (result) =>{\r\n        socket.emit('search', result, this.state.room);\r\n    }\r\n      componentWillMount = () => {\r\n          socket.on('change color', (col) => {\r\n              // Here Im updating the messages array, to be the new messages that I have recived\r\n              this.setState({messages:col});\r\n          })\r\n          // Setting the state with the search result\r\n          socket.on('search', (result) => {  \r\n            this.setState({\r\n                videos: result.data.items,\r\n                selectedVideo:result.data.items[0]\r\n              });   \r\n        })\r\n        socket.on('select', (video) => {  \r\n            this.setState({selectedVideo:video});\r\n        })\r\n        socket.on('play', (time, id) => {\r\n            console.log(\"From APP.js: Play will now setState\")\r\n            this.setState({time:time, PlayerState:\"PLAY\", id:id})\r\n        })\r\n        socket.on('pause', (id) => {\r\n            this.setState({PlayerState:\"PAUSE\", id:id})\r\n        })\r\n        socket.on('memberTime', (times) => {\r\n\r\n            // If we are really a new member reciving this time\r\n            if(this.state.joined ==true){\r\n\r\n                console.log(times); \r\n                this.setState({time:times});\r\n\r\n            }\r\n            \r\n\r\n\r\n        })\r\n        socket.on('newTime', (newTime) => {\r\n            this.setState({newTime:newTime})\r\n        })\r\n        socket.on('onChange', (state) => {\r\n            this.setState({onChange:state})\r\n        })\r\n        socket.on('newMemberPause', () => {\r\n            // Now this is used to update the props, to notify everyone that a new member has joined\r\n            this.setState({newMemberPause:1})\r\n        })\r\n       \r\n        socket.on('n', (SelectedVideo) => {\r\n\r\n            if(this.state.selectedVideo != SelectedVideo){   \r\n                this.setState({selectedVideo:SelectedVideo})\r\n                console.log(\"n: setting joined:true, this should come first\")\r\n                this.joined= true;  \r\n            }\r\n\r\n            \r\n            \r\n        })\r\n\r\n        socket.on('newMember', (list) => {\r\n            if(this.state.selectedVideo!= null){   \r\n               this.newMemberVideo();  \r\n            }\r\n            console.log(list); \r\n            this.setState({members:list}); \r\n        })\r\n\r\n        socket.on('remove', (list) => {\r\n           \r\n            console.log(list); \r\n            this.setState({members:list}); \r\n        })\r\n\r\n        socket.on('text', (message) => {\r\n           \r\n            console.log(message)\r\n            this.setState({newMessage:String(message)}); \r\n        })\r\n\r\n        socket.on('enter', (term, ID) => {\r\n            if(term!=\"FAIL\"){\r\n            // So here the room will no longer be null\r\n            // Here when this happens you need to\r\n            this.setState({room:term})\r\n            this.setState({socketId:ID})\r\n            }else{\r\n                // Here you attempted to enter a code that doesnt exist\r\n                console.log(\"The code you have entered does not exist in the data base, please try again\"); \r\n                // IF the code doesnt work, we want to display a message, with an x button, that indciates the wrong code was used\r\n                this.setState({error:1}); \r\n                document.getElementById(\"searchid\").style.borderColor = \"red\";\r\n            }\r\n        })\r\n\r\n\r\n      }\r\n\r\n      newMemberVideo = () => {\r\n        console.log(this.state.room);\r\n        \r\n        socket.emit('n', this.state.selectedVideo, this.state.room);\r\n\r\n      }\r\n\r\n    sendMessage = (message) =>{\r\n        \r\n        // You take this message that is given, and update the state of the messages\r\n        const list = this.state.messages;\r\n        list.push(message); \r\n\r\n        //This sends the current list of the messages to all the sockets\r\n        this.send(list)\r\n\r\n    }\r\n\r\n\r\n    pressPlay = (time, id) => {\r\n      // From here it will emit to all the other sokcets, execpt this one\r\n       \r\n        socket.emit('play',time, id, this.state.room)\r\n    }\r\n\r\n    pressPause = (id) => {\r\n        // From here it will emit to all the other sokcets, execpt this one\r\n          socket.emit('pause', id, this.state.room)\r\n      }\r\n\r\n    newTime = (newTime) => {\r\n        socket.emit('newTime', newTime, this.state.room)\r\n    }\r\n\r\n    Reset = () =>{\r\n        this.setState({newMemberPause:0}); \r\n    }\r\n\r\n \r\n    search = async (term)=>{\r\n        //The SearchBar calls the search funciton with the term\r\n        // And here we will make the api request\r\n        \r\n        const result = await youtube.get(\"/search\", {\r\n            params: {\r\n              q: term,\r\n              part: \"snippet\",\r\n               type: 'video',\r\n              maxResults: 5,\r\n              key: 'AIzaSyBSAzBSy4bhfG8JaCmptEDdreLpQXdAAbQ'            }\r\n          });\r\n          \r\n          console.log(result);\r\n          this.EmitSearch(result);\r\n          \r\n    }\r\n\r\n\r\nenter = (term) => {\r\n   \r\n    console.log(term); \r\n    socket.emit('enter', term); \r\n}\r\n\r\nnameSubmission = (name) => {\r\n   \r\n   \r\n    this.setState({name:name}); \r\n\r\n    // What we want to do is, have the logic to check the length og the list\r\n    socket.emit(\"newMember\", name,this.state.socketId, this.state.room); \r\n\r\n}\r\n\r\n\r\nonChange = (state) => {\r\n\r\n    socket.emit(\"onChange\", state, this.state.room);\r\n\r\n}\r\n\r\nreset = (time) => {\r\n\r\n   \r\n    socket.emit(\"memberTime\", time, this.state.room);\r\n\r\n}\r\n\r\n\r\nStateReset = () => {\r\n\r\n    this.setState({PlayerState:\"\"}); \r\n}\r\n\r\n\r\ncreateRoom = () => {\r\n    // When the create room session button is pressed, we want to emit that we want to create a new room\r\n    console.log(\"Ive been clic\")\r\n    socket.emit('createRoom');\r\n}\r\n// This is a function\r\nonVideoSelect = (video) =>{\r\n    socket.emit('select', video, this.state.room) \r\n}\r\n\r\nclose = ( ) => {\r\n\r\n    this.setState({error:0}); \r\n}\r\n\r\n\r\nHeader = () => {\r\n\r\n    return(\r\n\r\n        <div class=\"ui fixed inverted menu red\">\r\n        <left>\r\n        <div class=\"ui container\">\r\n          <a href=\"#\" class=\"header item\"></a>\r\n          <img src=\"https://img.icons8.com/clouds/150/000000/youtube-play.png\"/>\r\n            YouTube Party!\r\n          \r\n        </div>\r\n        </left>\r\n      </div>\r\n      \r\n\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nErrMsg = () =>{\r\n\r\nreturn(\r\n    <div class=\"ui negative message\">\r\n    <i onClick={this.close} class=\"close icon\"></i>\r\n    <div class=\"header\">\r\n        Invalid room code!\r\n    </div>\r\n    <p>Try again, or create new session. \r\n    </p></div>\r\n\r\n\r\n);\r\n\r\n\r\n}\r\n\r\nFooter= () =>{\r\n    return(\r\n    <div class=\"ui red inverted vertical footer segment form-page\">\r\n    <div class=\"ui container\">\r\n      <left> YouTube Party by David George</left> \r\n    </div>\r\n    </div>\r\n    ); \r\n\r\n}\r\n\r\nErrorDecider = () =>{\r\n\r\n\r\n\r\n                \r\n\r\n\r\n                return(\r\n                        \r\n                            \r\n                            <Login incor={0} enter={this.enter} createRoom={this.createRoom} roomStatus={null}/>\r\n                            \r\n                            \r\n                       \r\n\r\n                  \r\n                );\r\n\r\n\r\n}\r\n\r\n\r\n\r\nnewText = (message) => {\r\n\r\n    console.log(\"from App.js:\")\r\n    console.log(message); \r\n    socket.emit(\"text\", message, this.state.room) \r\n\r\n}\r\n\r\njoinedReset = () => {\r\n\r\n   console.log(\"joinedReset: Called\")\r\n    this.joined = false; \r\n    this.called = true; \r\n}\r\n\r\ntextReset = () => {\r\n    this.setState({newMessage:\"\"})\r\n}\r\n\r\njoined = () => {\r\n\r\n    socket.emit('joined', this.state.room);\r\n}\r\n\r\nEnterName = () => {\r\n\r\n    // If the name is null, then we must prompt the user to enter in their name, which will\r\n    if(this.state.name == null){\r\n        \r\n        // pass in \r\n        return(\r\n         \r\n            <Login nameSubmission={this.nameSubmission} roomStatus={this.state.room}/>\r\n         \r\n        );\r\n\r\n    }else{\r\n\r\n        if(this.state.selectedVideo == null){\r\n            return(\r\n            <div class=\"ui container middle aligned center aligned grid\"> \r\n                \r\n            <div id=\"R\" className=\"ui container middle aligned center aligned grid\" >\r\n                <h4 className=\"ui header \"> ROOM CODE: {this.state.room}</h4>\r\n               \r\n                <div id=\"utube\"className=\"ui container middle aligned center aligned grid\">\r\n                    <div> \r\n                     <img src=\"https://img.icons8.com/clouds/300/000000/youtube-play.png\"/>\r\n                     </div>\r\n                     </div>\r\n                <div className=\"ui container middle aligned center aligned grid\"> <h1  style ={{marginTop:'80px' }}>YouTube Party!</h1></div>\r\n                <SearchBar Search={this.search} />\r\n                <Loading/>\r\n                \r\n                \r\n               \r\n              \r\n        \r\n             </div>\r\n            \r\n             </div>\r\n            ); \r\n        }\r\n      \r\n\r\n        return(\r\n            <div> \r\n                \r\n            <div className=\"ui container\" style ={{marginTop:'80px' }}>\r\n                <h4 className=\"ui header\"> ROOM CODE: {this.state.room}</h4>\r\n                <SearchBar style ={{marginBottom:'10px' }}Search={this.search} />\r\n                \r\n                \r\n                <div style ={{marginTop:'10px' }} className=\"ui grid\">\r\n                    <div className=\"ui row\">\r\n    \r\n                        <div  className=\"eleven wide column\">\r\n                            \r\n                            <VideoDetail loaded={this.loaded} Reset={this.Reset}joined={this.joined} joinedReset={this.joinedReset} StateReset={this.StateReset}reset={this.reset } nPause={this.state.newMemberPause}   onChange={this.onChange} PlayerState={this.state.PlayerState}  State={this.state.onChange}  updatedTime={this.state.newTime} newTime ={this.newTime} id={this.state.id} time ={this.state.time}  pause={this.pressPause} play={this.pressPlay} video={this.state.selectedVideo}/>\r\n                            \r\n                                \r\n                                    {this.state.data}\r\n                                    <div className=\"ui segment\"> \r\n                                <h4 className=\"ui header\"> Connected members</h4>\r\n                                <MemberList msglist={this.state.members} name={this.state.name}/>\r\n                                </div>\r\n                                \r\n    \r\n    \r\n    \r\n                        </div>\r\n    \r\n                        <div className=\"five wide column\">\r\n                                <VideoList videos={this.state.videos} onVideoSelect = {this.onVideoSelect}/>\r\n                            \r\n                        </div>\r\n                    </div>  \r\n                </div>\r\n              \r\n              <Chat textReset={this.textReset} text={this.newText}  newtext={this.state.newMessage}/>\r\n              \r\n        \r\n             </div>\r\n            \r\n             </div>\r\n        );\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nrender(){\r\n    if(this.state.room == null){\r\n        return (\r\n\r\n            <div class=\"ui middle aligned center aligned grid\"      > \r\n            {this.ErrorDecider()}\r\n\r\n            </div>\r\n        )\r\n    }\r\n    \r\n//Here the room is no longer null, we must once again parse this out into its own logic to allow users to enter their name\r\n    return this.EnterName(); \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default App; ","import React  from 'react'; \r\nimport ReactDOM from 'react-dom'; \r\nimport App from './comp/App'; \r\n\r\nReactDOM.render(\r\n\r\n<App/>, document.querySelector('#root')\r\n\r\n);\r\n\r\n"],"sourceRoot":""}